import javax.swing.*;
import javax.swing.border.EmptyBorder;
import com.mongodb.client.*;
import org.bson.Document;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.util.List;
import java.util.ArrayList;
import java.util.Enumeration;
import java.net.URL;
import javax.imageio.ImageIO;

public class OnlineGarmentShoppingApp {
    static final String MONGO_URI = "mongodb://localhost:27017";
    static final String DATABASE_NAME = "garment_shop";
    static final String USERS_COLLECTION = "users";
    static final String GARMENTS_COLLECTION = "garments";
    static final String CART_COLLECTION = "shopping_cart";
    static final String ORDERS_COLLECTION = "orders";

    private JFrame frame;
    private JTextField usernameField;
    private JPasswordField passwordField;
    private MongoClient mongoClient;
    private MongoDatabase database;
    private String currentUser;
    private static final Dimension STANDARD_SIZE = new Dimension(1200, 800);
    private static final Dimension ITEM_SIZE = new Dimension(300, 200);
    private static final Dimension SIDEBAR_SIZE = new Dimension(250, STANDARD_SIZE.height);

    // Color schemes for monochromatic design
    private static class ColorScheme {
        Color primaryColor;
        Color secondaryColor;
        Color accentColor;
        Color textColor;
        Color backgroundColor;

        ColorScheme(Color primary, Color secondary, Color accent, Color text, Color background) {
            this.primaryColor = primary;
            this.secondaryColor = secondary;
            this.accentColor = accent;
            this.textColor = text;
            this.backgroundColor = background;
        }
    }

    // Monochromatic light scheme
    private static final ColorScheme LIGHT_SCHEME = new ColorScheme(
        new Color(50, 50, 50),    // Primary
        new Color(240, 240, 240), // Secondary
        new Color(100, 100, 100), // Accent
        new Color(30, 30, 30),    // Text
        new Color(255, 255, 255)  // Background
    );

    // Monochromatic dark scheme
    private static final ColorScheme DARK_SCHEME = new ColorScheme(
        new Color(200, 200, 200), // Primary
        new Color(40, 40, 40),    // Secondary
        new Color(150, 150, 150), // Accent
        new Color(220, 220, 220), // Text
        new Color(20, 20, 20)     // Background
    );

    private ColorScheme currentScheme = LIGHT_SCHEME;

    // Font constants
    private static final Font TITLE_FONT = new Font("Helvetica", Font.BOLD, 24);
    private static final Font HEADER_FONT = new Font("Helvetica", Font.BOLD, 18);
    private static final Font BODY_FONT = new Font("Helvetica", Font.PLAIN, 14);
    private static final Font BUTTON_FONT = new Font("Helvetica", Font.BOLD, 14);

    private JPanel sidebar;
    private Timer sidebarTimer;
    private boolean isSidebarVisible = false;

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (Exception e) {
                e.printStackTrace();
            }
            new OnlineGarmentShoppingApp().displayLogin();
        });
    }

    public OnlineGarmentShoppingApp() {
        mongoClient = MongoClients.create(MONGO_URI);
        database = mongoClient.getDatabase(DATABASE_NAME);
        addSampleGarments();
    }

    private void addSampleGarments() {
        MongoCollection<Document> garmentsCollection = database.getCollection(GARMENTS_COLLECTION);
        if (garmentsCollection.countDocuments() == 0) {
            List<Document> sampleGarments = new ArrayList<>();
            sampleGarments.add(createGarment("Modern T-Shirt", 29.99, "Clothing", 
                "https://example.com/modern-tshirt.jpg", List.of("S", "M", "L", "XL")));
            sampleGarments.add(createGarment("Designer Jeans", 79.99, "Clothing",
                "https://example.com/designer-jeans.jpg", List.of("28", "30", "32", "34", "36")));
            sampleGarments.add(createGarment("Sleek Jacket", 129.99, "Clothing",
                "https://example.com/sleek-jacket.jpg", List.of("S", "M", "L", "XL")));
            sampleGarments.add(createGarment("Trendy Sneakers", 89.99, "Footwear",
                "https://example.com/trendy-sneakers.jpg", List.of("7", "8", "9", "10", "11")));
            sampleGarments.add(createGarment("Stylish Hat", 34.99, "Accessories",
                "https://example.com/stylish-hat.jpg", List.of("S", "M", "L")));
            
            garmentsCollection.insertMany(sampleGarments);
            System.out.println("Sample garments added to the database.");
        }
    }

    private Document createGarment(String name, double price, String category, String image, List<String> sizes) {
        return new Document()
            .append("name", name)
            .append("price", price)
            .append("category", category)
            .append("image", image)
            .append("sizes", sizes);
    }

    private JButton createStyledButton(String text, ActionListener actionListener) {
        JButton button = new JButton(text);
        button.setFont(BUTTON_FONT);
        button.setForeground(Color.WHITE);
        button.setBackground(currentScheme.primaryColor);
        button.setBorder(BorderFactory.createEmptyBorder(8, 16, 8, 16));
        button.setFocusPainted(false);
        button.addActionListener(actionListener);
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(currentScheme.primaryColor.darker());
            }
            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(currentScheme.primaryColor);
            }
        });
        return button;
    }

    private JTextField createStyledTextField(String placeholder) {
        JTextField textField = new JTextField(20);
        textField.setFont(BODY_FONT);
        textField.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(currentScheme.primaryColor),
            BorderFactory.createEmptyBorder(10, 10, 10, 10)
        ));
        textField.setForeground(currentScheme.textColor);
        textField.setText(placeholder);
        textField.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (textField.getText().equals(placeholder)) {
                    textField.setText("");
                }
            }
            @Override
            public void focusLost(FocusEvent e) {
                if (textField.getText().isEmpty()) {
                    textField.setText(placeholder);
                }
            }
        });
        return textField;
    }

    private JPasswordField createStyledPasswordField(String placeholder) {
        JPasswordField passwordField = new JPasswordField(20);
        passwordField.setFont(BODY_FONT);
        passwordField.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(currentScheme.primaryColor),
            BorderFactory.createEmptyBorder(10, 10, 10, 10)
        ));
        passwordField.setForeground(currentScheme.textColor);
        passwordField.setEchoChar((char) 0);
        passwordField.setText(placeholder);
        passwordField.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (String.valueOf(passwordField.getPassword()).equals(placeholder)) {
                    passwordField.setText("");
                    passwordField.setEchoChar('â€¢');
                }
            }
            @Override
            public void focusLost(FocusEvent e) {
                if (passwordField.getPassword().length == 0) {
                    passwordField.setText(placeholder);
                    passwordField.setEchoChar((char) 0);
                }
            }
        });
        return passwordField;
    }

    public void displayLogin() {
        frame = new JFrame("Shoppie - Login");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(STANDARD_SIZE);
        frame.setLayout(new BorderLayout());
        updateUIColors();

        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBackground(currentScheme.backgroundColor);
        panel.setBorder(BorderFactory.createEmptyBorder(40, 40, 40, 40));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridwidth = GridBagConstraints.REMAINDER;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 0, 10, 0);

        JLabel titleLabel = new JLabel("Shoppie", SwingConstants.CENTER);
        titleLabel.setFont(TITLE_FONT);
        titleLabel.setForeground(currentScheme.primaryColor);
        panel.add(titleLabel, gbc);

        usernameField = createStyledTextField("Username");
        passwordField = createStyledPasswordField("Password");

        panel.add(usernameField, gbc);
        panel.add(passwordField, gbc);

        panel.add(createStyledButton("Login", e -> login()), gbc);
        panel.add(createStyledButton("Register", e -> register()), gbc);

        frame.add(panel, BorderLayout.CENTER);
        frame.setVisible(true);
    }

    public void login() {
        String username = usernameField.getText();
        String password = new String(passwordField.getPassword());

        MongoCollection<Document> usersCollection = database.getCollection(USERS_COLLECTION);
        Document query = new Document("username", username).append("password", password);
        Document user = usersCollection.find(query).first();

        if (user != null) {
            currentUser = username;
            JOptionPane.showMessageDialog(frame, "Login successful!");
            viewProducts();
        } else {
            JOptionPane.showMessageDialog(frame, "Invalid username or password.");
        }
    }

    public void register() {
        String username = usernameField.getText();
        String password = new String(passwordField.getPassword());

        MongoCollection<Document> usersCollection = database.getCollection(USERS_COLLECTION);
        Document query = new Document("username", username);
        Document existingUser = usersCollection.find(query).first();

        if (existingUser != null) {
            JOptionPane.showMessageDialog(frame, "Username already exists. Please choose another.");
        } else {
            Document newUser = new Document("username", username).append("password", password);
            usersCollection.insertOne(newUser);
            JOptionPane.showMessageDialog(frame, "Registration successful! You can now log in.");
        }
    }

    private void updateUIColors() {
        frame.getContentPane().setBackground(currentScheme.backgroundColor);
        updateComponentColors(frame.getContentPane());
    }

    private void updateComponentColors(Container container) {
        for (Component c : container.getComponents()) {
            if (c instanceof JPanel) {
                c.setBackground(currentScheme.backgroundColor);
            } else if (c instanceof JButton) {
                JButton button = (JButton) c;
                button.setBackground(currentScheme.primaryColor);
                button.setForeground(Color.WHITE);
            } else if (c instanceof JLabel) {
                JLabel label = (JLabel) c;
                label.setForeground(currentScheme.textColor);
            }
            if (c instanceof Container) {
                updateComponentColors((Container) c);
            }
        }
    }

    private ImageIcon loadImage(String path, int width, int height) {
        if (path == null || path.isEmpty()) {
            System.out.println("Warning: Image path is null or empty");
            return createPlaceholderImage(width, height);
        }
        
        try {
            URL imageUrl = new URL(path);
            Image image = ImageIO.read(imageUrl);
            if (image != null) {
                Image scaledImage = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);
                return new ImageIcon(scaledImage);
            } else {
                System.out.println("Warning: Could not read image from URL: " + path);
                return createPlaceholderImage(width, height);
            }
        } catch (Exception e) {
            System.out.println("Error loading image from URL: " + path);
            e.printStackTrace();
            return createPlaceholderImage(width, height);
        }
    }

    private ImageIcon createPlaceholderImage(int width, int height) {
        BufferedImage placeholderImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = placeholderImage.createGraphics();
        g2d.setColor(Color.LIGHT_GRAY);
        g2d.fillRect(0, 0, width, height);
        g2d.setColor(Color.GRAY);
        g2d.drawRect(0, 0, width - 1, height - 1);
        g2d.setColor(Color.DARK_GRAY);
        g2d.drawString("No Image", 10, height / 2);
        g2d.dispose();
        return new ImageIcon(placeholderImage);
    }

    private String getSelectedSize(ButtonGroup sizeGroup) {
        for (Enumeration<AbstractButton> buttons = sizeGroup.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();
            if (button.isSelected()) {
                return button.getText();
            }
        }
        return null;
    }

    private JPanel createProductCard(Document garment) {
        J
